####################################################################################################
#                                                                                                  #
#                                   DO NOT COMMIT LOCAL (TEST) CHANGES                             #
#                                                                                                  #
####################################################################################################

#+++++++++++++++++++++++++++++++ UNDERLYING RDBMS ENGINE PROPERTIES +++++++++++++++++++++++++++++++#
# Database engine
#database.engine = MYSQL
database.engine = POSTGRESQL
# Database host
database.host = localhost
# Database port
database.port = 5432
#database.port = 3306
# If you don't specify database.name the database name 
# will be following the materialization type:
# - MAT_SAT : het2onto_{osystemName}_mat_sat
# - MAT_REF_* : het2onto_{osystemName}_mat_ref
#database.name = 

# Database user
database.user = postgres

# Database password
database.password = postgres
#database.password = cedar

#+++++++++++++++++++++++++++++++ DO NOT CHANGE FOLLOWING VALUES +++++++++++++++++++++++++++++++++++

# The RDBMS (input) triples table name
database.triples_table_name = triples

# The RDBMS (output) encoded triples table name
database.encoded_triples_table_name = encoded

# Database dictionary table name.
# Use to encode the input query and ontology and decode the results.
database.dictionary_table_name = dictionary

# Database (physical) storage layout.
# Valid options: TRIPLES_TABLE, TABLE_PER_ROLE_AND_CONCEPT
#database.storage_layout = TRIPLES_TABLE
database.storage_layout = TABLE_PER_ROLE_AND_CONCEPT

# If this parameter is true and if there already exists a database of the given name, 
# then the database is dropped before being rewritten.
database.drop_existing_db = true
# If this parameter is true and if there already exist tables (within the database of the given name)
# having the name of some tables that we want to create, then these tables are dropped before being
# recreated.

database.fetch_size = 1000000
#++++++++++++++++++++++++++++++++++++++ DICTIONARY PROPERTIES +++++++++++++++++++++++++++++++++++++#
# Dictionary resultSet fetch size.
dictionary.fetch_size = 1000
#+++++++++++++++++++++++++++++++++++++ SATURATION PROPERTIES ++++++++++++++++++++++++++++++++++++++#
# Batch size.
saturation.batch_size = 1000
# enabled saturation will be choosed by the materialization method
#saturation.enable = true
# default name: encoded_saturated_triples
database.encoded_saturated_triples_table_name = encoded_sat
#++++++++++++++++++++++++++++++++++++++ STATISTICS PROPERTIES +++++++++++++++++++++++++++++++++++++#
# Flag indicating the statistics tables generation (or not) for the triples table.
statistics.create_tables_flag = false


input.ontology_file = 
dataset.name = 

#++++++++++++++++++++++++++++++ COVER SELECTION ALGORITHM PROPERTIES ++++++++++++++++++++++++++++++#
# Cover selection algorithm algorithm threads.
# Used for RDFS cover selection algorithm, when reformulating a query.
cover_selection_algorithm.threads = 32

# Cover selection algorithm cost function.
# Valid options: TRIPLES_TABLE_COST_MODEL, TABLE_PER_ROLE_AND_CONCEPT_COST_MODEL, POSTGRESQL
cover_selection_algorithm.cost_function = TABLE_PER_ROLE_AND_CONCEPT_COST_MODEL
#------------------------------ COVER SELECTION ALGORITHM PROPERTIES ------------------------------#

#+++++++++++++++++++++++++++++++ TRIPLES TABLE COST MODEL PROPERTIES ++++++++++++++++++++++++++++++#
# Cost model cost model constants name.
cost_model.constants_name = POSTGRESQL_CONTSTANTS
# Cost model algorithm IO constant.
cost_model.io_constant = 0.00046167385
# Cost model CPU constant.
cost_model.cpu_constant = 0.00018806125
# Cost model materialization constant.
cost_model.materialization_constant = 0.00039235885
# Cost model index 1 constant.
cost_model.index1_constant = 0.001285472726
# Cost model index 2 constant.
cost_model.index2_constant = 0.00053436378
# Cost model external disk unique flag
cost_model.external_disk_unique_flag = false
# Cost model larger fragment sub-query intermediate result pipelining flag.
cost_model.pipeline_larger_subquery_flag = true
#------------------------------- TRIPLES TABLE COST MODEL PROPERTIES ------------------------------#

#+++++++++++++++++++++++++++++++++++ SQL QuerySession PROPERTIES +++++++++++++++++++++++++++++++++++#
# SQL main query distinct flag
translator.main_query_distinct_flag = true
# SQL query syntax.
# Valid options: CTE_JOINED_REFORMULATIONS, JOINED_REFORMULATIONS
translator.sql_syntax = CTE_JOINED_REFORMULATIONS

# Attributes prefix for attributes renaming in SQL.
translator.attribute_prefix = att_

# Relation prefix for relations renaming in SQL.
# Used when the storage schema is TRIPLES_TABLE (see UNDERLYING RDBMS ENGINE PROPERTIES).
translator.relation_prefix = p

# Database dictionary-encoded (large) triples (s,p,o) table name.
# Used when the storage layout is TRIPLES_TABLE (see UNDERLYING RDBMS ENGINE PROPERTIES).
translator.encoded_triples_table_name = encoded_triples

# Database prefix for concept/role table names.
# Used when the storage layout is TABLE_PER_ROLE_AND_CONCEPT (see UNDERLYING RDBMS ENGINE PROPERTIES).
translator.table_name_prefix = t_

# CQ atom (triple pattern) prefix for relations renaming.
# Used when the storage layout is TABLE_PER_ROLE_AND_CONCEPT (see UNDERLYING RDBMS ENGINE PROPERTIES).
translator.alias_prefix = tt_
#----------------------------------- SQL TRANSLATION PROPERTIES -----------------------------------#

#+++++++++++++++ SQL QUERY EXECUTION AGAINST THE UNDERLYING RDBMS ENGINE PROPERTIES +++++++++++++++#
# Query semantics
# Valid options: SET, BAG
query.semantics = SET

# SQL query max length.
# If set (ie. > 0), covers producing SQL queries larger than the specified
# max length will be avoided.
query.max_length = 0

# SQL number of executions against the underlying RDBMS engine (repetitions without warm-up)
query.executions = 1

# SQL resultSet fetch size
query.fetch_size = 1000000

# SQL query resultSet dictionary-decode flag
query.decode_results = true

# Input directory.
# Used to retrieve the query execution information (avoid executing against
# the RDBMS engine the same SQL) of known (already executed) query, cover,
# engine, etc.
query.input_directory = 
#--------------- SQL QUERY EXECUTION AGAINST THE UNDERLYING RDBMS ENGINE PROPERTIES ---------------#

#--------------- RDFS REFORMULATION REASONNER -----------------------------------------------------#
reasoner.type = EMPTY
